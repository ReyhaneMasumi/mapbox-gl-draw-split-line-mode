{"version":3,"sources":["App.js","../../src/index.js","reportWebVitals.js","index.js"],"names":["map","draw","drawBar","SplitLineMode","onSetup","spliter","main","this","getSelected","f","toGeoJSON","length","Error","toDisplayFeatures","state","geojson","display","changeMode","cut","forEach","feature","idx","geometry","type","geojsonTypes","LINE_STRING","MULTI_LINE_STRING","afterCut","lineSplit","features","el","newF","newFeature","addFeature","deleteFeature","id","silent","onKeyUp","e","keyCode","exitMode","modes","SIMPLE_SELECT","extendDrawBar","opt","ctrl","buttons","onAddOrig","onAdd","onRemoveOrig","onRemove","elContainer","b","addButton","removeButton","elButton","document","createElement","className","classes","Array","c","classList","add","addEventListener","on","action","appendChild","removeEventListener","remove","App","useState","isActive","setIsActive","mapRef","useRef","openMenu","mapboxGl","getRTLTextPluginStatus","setRTLTextPlugin","err","console","error","useEffect","Map","container","current","style","center","zoom","pitch","interactive","hash","attributionControl","customAttribution","transformRequest","url","headers","MapboxDraw","splitLineMode","passing_mode_point","mapboxGlDrawPassingMode","draw_point","passing_mode_line_string","draw_line_string","passing_mode_polygon","draw_polygon","userProperties","once","resize","addControl","set","properties","coordinates","splitLine","mode","alert","message","ref","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.eb321f2d.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport mapboxGl from 'mapbox-gl';\nimport MapboxDraw from '@mapbox/mapbox-gl-draw';\nimport '@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css';\nimport SplitLineMode from 'mapbox-gl-draw-split-line-mode';\nimport mapboxGlDrawPassingMode from 'mapbox-gl-draw-passing-mode';\nimport './App.css';\n\nlet map;\nlet draw;\nlet drawBar;\n\nclass extendDrawBar {\n  constructor(opt) {\n    let ctrl = this;\n    ctrl.draw = opt.draw;\n    ctrl.buttons = opt.buttons || [];\n    ctrl.onAddOrig = opt.draw.onAdd;\n    ctrl.onRemoveOrig = opt.draw.onRemove;\n  }\n  onAdd(map) {\n    let ctrl = this;\n    ctrl.map = map;\n    ctrl.elContainer = ctrl.onAddOrig(map);\n    ctrl.buttons.forEach((b) => {\n      ctrl.addButton(b);\n    });\n    return ctrl.elContainer;\n  }\n  onRemove(map) {\n    let ctrl = this;\n    ctrl.buttons.forEach((b) => {\n      ctrl.removeButton(b);\n    });\n    ctrl.onRemoveOrig(map);\n  }\n  addButton(opt) {\n    let ctrl = this;\n    var elButton = document.createElement('button');\n    elButton.className = 'mapbox-gl-draw_ctrl-draw-btn';\n    if (opt.classes instanceof Array) {\n      opt.classes.forEach((c) => {\n        elButton.classList.add(c);\n      });\n    }\n    elButton.addEventListener(opt.on, opt.action);\n    ctrl.elContainer.appendChild(elButton);\n    opt.elButton = elButton;\n  }\n  removeButton(opt) {\n    opt.elButton.removeEventListener(opt.on, opt.action);\n    opt.elButton.remove();\n  }\n}\n\nfunction App() {\n  const [isActive, setIsActive] = useState(false);\n  let mapRef = useRef(null);\n\n  const openMenu = () => {\n    setIsActive(true);\n  };\n\n  if (mapboxGl.getRTLTextPluginStatus() === 'unavailable')\n    mapboxGl.setRTLTextPlugin(\n      'https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-rtl-text/v0.2.3/mapbox-gl-rtl-text.js',\n      (err) => {\n        err && console.error(err);\n      },\n      true\n    );\n\n  useEffect(() => {\n    map = new mapboxGl.Map({\n      container: mapRef.current || '',\n      style: `https://map.ir/vector/styles/main/mapir-xyz-light-style.json`,\n      center: [51.3857, 35.6102],\n      zoom: 10,\n      pitch: 0,\n      interactive: true,\n      hash: true,\n      attributionControl: true,\n      customAttribution: '© Map © Openstreetmap',\n      transformRequest: (url) => {\n        return {\n          url: url,\n          headers: {\n            'x-api-key':\n              'eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6ImRiZWU0YWU4OTk4OTA3MmQ3OTFmMjQ4ZDE5N2VhZTgwZWU2NTUyYjhlYjczOWI2NDdlY2YyYzIzNWRiYThiMzIzOTM5MDkzZDM0NTY2MmU3In0.eyJhdWQiOiI5NDMyIiwianRpIjoiZGJlZTRhZTg5OTg5MDcyZDc5MWYyNDhkMTk3ZWFlODBlZTY1NTJiOGViNzM5YjY0N2VjZjJjMjM1ZGJhOGIzMjM5MzkwOTNkMzQ1NjYyZTciLCJpYXQiOjE1OTA4MjU0NzIsIm5iZiI6MTU5MDgyNTQ3MiwiZXhwIjoxNTkzNDE3NDcyLCJzdWIiOiIiLCJzY29wZXMiOlsiYmFzaWMiXX0.M_z4xJlJRuYrh8RFe9UrW89Y_XBzpPth4yk3hlT-goBm8o3x8DGCrSqgskFfmJTUD2wC2qSoVZzQKB67sm-swtD5fkxZO7C0lBCMAU92IYZwCdYehIOtZbP5L1Lfg3C6pxd0r7gQOdzcAZj9TStnKBQPK3jSvzkiHIQhb6I0sViOS_8JceSNs9ZlVelQ3gs77xM2ksWDM6vmqIndzsS-5hUd-9qdRDTLHnhdbS4_UBwNDza47Iqd5vZkBgmQ_oDZ7dVyBuMHiQFg28V6zhtsf3fijP0UhePCj4GM89g3tzYBOmuapVBobbX395FWpnNC3bYg7zDaVHcllSUYDjGc1A', //dev api key\n            'Mapir-SDK': 'reactjs',\n          },\n        };\n      },\n    });\n    draw = new MapboxDraw({\n      modes: {\n        ...MapboxDraw.modes,\n        splitLineMode: SplitLineMode,\n        passing_mode_point: mapboxGlDrawPassingMode(\n          MapboxDraw.modes.draw_point\n        ),\n        passing_mode_line_string: mapboxGlDrawPassingMode(\n          MapboxDraw.modes.draw_line_string\n        ),\n        passing_mode_polygon: mapboxGlDrawPassingMode(\n          MapboxDraw.modes.draw_polygon\n        ),\n      },\n      userProperties: true,\n    });\n    drawBar = new extendDrawBar({\n      draw: draw,\n      buttons: [\n        {\n          on: 'click',\n          action: openMenu,\n          classes: ['split-icon'],\n        },\n      ],\n    });\n    map.once('load', () => {\n      map.resize();\n      map.addControl(drawBar, 'top-right');\n      draw.set({\n        type: 'FeatureCollection',\n        features: [\n          {\n            id: 'example_id',\n            type: 'Feature',\n            properties: {},\n            geometry: {\n              type: 'LineString',\n              coordinates: [\n                [51.46717071533203, 35.752642192392955],\n                [51.41704559326172, 35.7715862712587],\n                [51.37207031249999, 35.73954585450408],\n                [51.31988525390625, 35.753756674845675],\n                [51.29344940185547, 35.713904233681035],\n                [51.37035369873047, 35.67012719291238],\n                [51.32434844970703, 35.633581468816594],\n              ],\n            },\n          },\n        ],\n      });\n    });\n  }, []);\n\n  const splitLine = (mode) => {\n    try {\n      draw?.changeMode('splitLineMode', { spliter: mode });\n    } catch (err) {\n      alert(err.message);\n      console.error(err);\n    }\n  };\n\n  return (\n    <div className=\"map-wrapper\">\n      <div id=\"map\" ref={mapRef} />\n      {isActive ? (\n        <div className={`mapboxgl-ctrl-group mapboxgl-ctrl split`}>\n          <button\n            className=\"mapbox-gl-draw_ctrl-draw-btn mapbox-gl-draw_line\"\n            onClick={() => {\n              splitLine('line_string');\n              setIsActive(false);\n            }}\n          />\n          <button\n            className=\"mapbox-gl-draw_ctrl-draw-btn mapbox-gl-draw_point\"\n            onClick={() => {\n              splitLine('point');\n              setIsActive(false);\n            }}\n          />\n          <button\n            className=\"mapbox-gl-draw_ctrl-draw-btn mapbox-gl-draw_polygon\"\n            onClick={() => {\n              splitLine('polygon');\n              setIsActive(false);\n            }}\n          />\n        </div>\n      ) : null}\n    </div>\n  );\n}\n\nexport default App;\n","import { geojsonTypes, modes } from '@mapbox/mapbox-gl-draw/src/constants';\nimport lineSplit from '@turf/line-split';\n\nconst SplitLineMode = {\n  onSetup: function ({ spliter }) {\n    let main = this.getSelected().map((f) => f.toGeoJSON());\n    if (main.length < 1)\n      throw new Error('Please select a Linestring/MultiLinestring!');\n    const state = {\n      main,\n      spliter: `passing_mode_${spliter}`,\n    };\n    return state;\n  },\n\n  toDisplayFeatures: function (state, geojson, display) {\n    display(geojson);\n    this.changeMode(state.spliter, (cut) => {\n      state.main.forEach((feature, idx) => {\n        if (\n          feature.geometry.type === geojsonTypes.LINE_STRING ||\n          feature.geometry.type === geojsonTypes.MULTI_LINE_STRING\n        ) {\n          let afterCut = lineSplit(feature, cut);\n          if (afterCut.features.length < 1) return;\n          afterCut.features.forEach((el) => {\n            let newF = this.newFeature(el);\n            this.addFeature(newF);\n          });\n          this.deleteFeature([feature.id], { silent: true });\n        } else {\n          throw new Error('The feature is not Linestring/MultiLinestring!');\n        }\n      });\n    });\n  },\n\n  onKeyUp: function (state, e) {\n    if (e.keyCode === 27) return this.exitMode();\n  },\n\n  exitMode: function (state, e) {\n    return this.changeMode(modes.SIMPLE_SELECT);\n  },\n};\n\nexport default SplitLineMode;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}